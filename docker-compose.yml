version: '2'
services:
  spring-boot-neo4j-integration:
    container_name: backend-app
    build:
      context: .
      dockerfile: Dockerfile
    #network_mode: host
    image: backend-app:latest
    volumes:
       - ~/spring-boot-neo4j-integration/:/data/
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8081:8081"
    depends_on:
      neo4j-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      grafana:
        condition: service_healthy
    links:
      - neo4j-db
      - redis
      - prometheus
      - grafana
    environment:
      SPRING_NEO4J_URI: bolt://neo4j-db:7687
      SPRING_NEO4J_PASSWORD: root
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6380
  redis:
    image: "redis:6-alpine"
    container_name: redis
    ports:
      - "6380:6380"
    restart: on-failure
    command: ["redis-server", "--bind","0.0.0.0","--port" ,"6380"]
    healthcheck:
      test: [ "CMD", "redis-cli","-p","6380","ping" ]
  neo4j-db:
    image: docker.io/neo4j:4.3.2
    container_name: neo4j-db
    restart: on-failure
    ports:
      - "7474:7474"
      - "7687:7687"
      - "7473:7473"
    healthcheck:
      test: cypher-shell --username neo4j --password secret 'MATCH (n) RETURN COUNT(n);' # Checks if neo4j server is up and running
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ./neo4j/logs:/logs
      - ./neo4j/data:/var/lib/neo4j/import
    environment:
      NEO4J_dbms_security_auth__enabled: "false"
      NEO4J_dbms_connector_bolt_listen__address: 0.0.0.0:7687
      NEO4J_AUTH: neo4j/root
      #NEO4J_dbms_logs_debug_level: DEBUG
      #NEO4J_dbms_connector_https_advertised__address: localhost:7473
      #NEO4J_dbms_connector_http_advertised__address: localhost:7474
      #NEO4J_dbms_connector_bolt_advertised__address: localhost:7687
  prometheus:
    image: prom/prometheus:v2.35.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config:/etc/prometheus/
    command: ["--config.file","/etc/prometheus/prometheus.yaml"]
    healthcheck:
      test:  wget --spider http://localhost:9090/-/healthy|| exit 1
      interval: 10s
      timeout: 10s
      retries: 5
  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    build:
      context: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    links:
      - 'prometheus'
    healthcheck:
      test: wget --spider http://localhost:3000 || exit 1
      interval: 10s
      timeout: 10s
      retries: 5



